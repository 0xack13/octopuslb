#       WELCOME TO OCTOPUS LOAD BALANCER 1.14
#       ----------------------------
#
#       This is the default Octopus configuration file. You may wish
#       to look at the Octopus home page (http://octopuslb.sourceforge.net/)
#       for the FAQ and other documentation.
#
#       The default Octopus config file shows what the defaults for
#		various options happen to be.
#		The hash (#) symbol at the start of a line denotes a comment and 
#		is ignored by the daemon, as are blank lines.
#		Directives must appear at the start of a line with no leading spaces
#		or tabs. Similarly, values must appear directly after the (=) symbol.
#		All commands are of the format DIRECTIVE=VALUE 


# OPTIONS FOR NETWORK CONFIGURATION
# -----------------------------------------------------------------------------

# Directive: binding_ip
#	The address that Octopus will bind to in order to listen for connections
#   Address 0.0.0.0 binds to all IP addresses on the system and is the default value
#	Accepted value is a full IP address, not a hostname.
#binding_ip=0.0.0.0

# Directive: binding_port
#	The TCP port that Octopus will bind to in order to listen for connections
#	The default value is 1080
#	Accepted values are integers greater than 1 
#binding_port=1080

# Directive: member_outbound_ip
#	If you have multiple network interfaces (either virtual or physical) you can
#	specify an IP address that Octopus should use when connecting to this class
#	of server. 
#	This directive affects connections to the Member servers.
#	The default value is 0.0.0.0.
#	Accepted value is a full IP address, not a hostname.
#member_outbound_ip=0.0.0.0

# Directive: clone_outbound_ip
#	If you have multiple network interfaces (either virtual or physical) you can
#	specify an IP address that Octopus should use when connecting to this class
#	of server.
#	This directive affects connections to the Clone servers. 
#	The default value is 0.0.0.0.
#	Accepted value is a full IP address, not a hostname.
#clone_outbound_ip=0.0.0.0


# OPTIONS FOR SERVER SELECTION
# -----------------------------------------------------------------------------

# Directive: algorithm
#	Sets the algorithm for load balancing. The allowed values are:
#
#	LC	Least Connections		The server with the lowest number of active connections is next
#	LL	Least Load		The server with the lowest load average is next. This option
#			Requires SNMP libraries to be installed and SNMP to be compiled into Octopus
#	RR	Round Robin	New connections are allocated in a round robin fashion
#	HASH	HTTP URI hashing	An algorithm intended for HTTP servers only. URI's (with query
#			strings ignored) become assigned to a specific server and subsequent requests for this URI
#			are always sent to this server unless it is overconnected, overloaded, disabled or has failed.
#			If SNMP is compiled into Octopus then this algorithm gains the ability to dynamically reallocate URI's 
#			to different servers based on server load. It is therefore highly recommended to 
#			compile Octopus against net-snmp is you intend to use this function.
#	STATIC	Exactly the same as the HASH method except that server selection is chosen using the arithmetic modulus
#			operator instead of the "Least Connections" method. The reason for choosing this method is when using clustered
#			load balancing instances and you desire each balancer to choose the same server every time and to also
#			choose the same server after a reboot. Does not balance optimally like HASH method does. It is critical that
#			when using this method with clustered instances of Octopus that the configuration files be the same with respect
#			to the order of the servers listed in the [server] section
#	
#	The default algorithm is LC (Least Connections) as this is usually the best all round method
#algorithm=LC

# Directive: clone_mode
#	If you operate a staging or testing environment in parallel to your production environment
#	you can elect to create a clone of every client request which is then sent to servers that are of
#	type clone. This feature lets you test/modify and then compare an entirely separate environment
#	using real world real-time requests entirely transparently to the production environment.
#	If you intend on using this feature then please read more about it in the documentation section
#	of the Octopus website.
#	Accepted values are 'enabled' or 'disabled' (default is disabled)
#clone_mode=disabled

# Directive: session_weight
#	This parameter only applies to the LL (Least Load) algorithm.
#	System load for server selection is simply the UNIX 1 minute load average which is collected via SNMP.
#	The problem with using UNIX load is that it is an average. Therefore, you can have a situation where
#	a server is not doing any work but has a high load average due to work it did in the first 10 seconds
#	of a particular minute. Similarly, a server with all CPUs maxed out may have a very low load average
#	because it has only become heavily loaded in the last 10 seconds.
#	To try and avoid these problems Octopus can add an offset to the collected load average based on the
#	number of active sessions and this directive. 
#   For example:
#	Server "Alf" has load average of 0.5 and server "Bart" has a load average of 1.0. With a 
#	session_weight of "0.1" and 10 active sessions Alf has an efective_load of 1.5 as 
#	effective_load = initial_load + (active_sessions * session_weight).
#	This means that Server "Bart" which has no active sessions will be used as the next server
#	because effective_load(Bart) < effective_load(Alf)
#	The default value is 0.1
#	Accepted values are positive floating point numbers.
#session_weight=0.1

# Directive: hash_rebalance_interval (seconds)
#	This parameter only applies to the HASH (HTTP URI hashing) algorithm.
#	This directive dictates the condition when a hash rebalance actually occurs, it is a count (in seconds)
#	of when a rebalance task is started. This time should be higher than the monitor_interval, if it is less
#	then it will occur at the same interval as the monitor process. It should also me a multiple of the 
#	monitor interval as it is run from within the monitor process ie. 4 second monitor interval, 16 second
#	rebalance interval.
#	The default value is 30 seconds.
#	Accepted values are integers greater than, or equal to, zero (zero disables the feature). 
#hash_rebalance_interval=30

# Directive: hash_rebalance_threshold (%)
#	This parameter only applies to the HASH (HTTP URI hashing) algorithm.
#	When a hash rebalance occurs, the effective_load of each server is calculated and the highest loaded server
#	and lowest loaded server are compared to see if there is a difference of hash_rebalance_threshold% between them.
#	If the effective loading (current_load / maximum_load * 100) is greater than this value the the rebalnce will occur.
#	The default value is 30 (%).
#	Accepted values are integers greater than 0 and less than 100.
#hash_rebalance_threshold=30

# Directive: hash_rebalance_size (%)
#	This parameter only applies to the HASH (HTTP URI hashing) algorithm.
#	When a hash rebalance occurs, and the hash_rebalance_threshold is satisfied, then this value % of assigned
#	URIs will be shifted from the most loaded server to the least loaded.
#	The default value is 5%.
#	Accepted values are integers greater than 0 and less than 100.
#hash_rebalance_size=5

# Directive: overload_mode
#	Overload mode decides what should happen with a session when all servers have current_load > maximum load.
#	In STRICT mode, connections will be dropped when all servers are overloaded.
#	In RELAXED mode, the most appropriate server will be chosen and no new sessions will be dropped.
#	The default value is RELAXED.
#	Accepted values are STRICT and RELAXED
#overload_mode=RELAXED


# OPTIONS FOR MISCELLANEOUS SERVER SETTINGS
# -----------------------------------------------------------------------------



# Directive: default_maxc
#	When a server is created by the client application, or when it is not explicitly assigned
#	within this configuration file, this value will dictate the maximum number of sessions the server
#	will be allowed to handle simultaneously.
#	Default value is 500.
#	Accepted values are integers greater than 0.
#default_maxc=500

# Directive: default_maxl
#	When a server is created by the client application, or when it is not explicity assigned
#	within this configuration file, this value will dictate the maximum load of the server
#	The default value is 4.0
#	Accepted values are positive floating point numbers.
#default_maxl=4.0

# Directive: shm_run_dir
#	This specifies the directory where the run file will be placed. The client looks in this
#	directory when trying to find active instances of Octopus. If you change this directory you will
#	have to specify the new directory as a parameter to the Octopus Client binary.
#	Accepted value is a directory that the user starting Octopus can write to.
#	Default value is /var/run/octopuslb
shm_run_dir=/var/run/octopuslb

# Directive: shm_perms
#	Permissions used to create SHM segment and SHM placeholder file on filesystem (in directory specified
#	by configuration file directive shm_run_dir).
#	Default is 644 which allows creator (and root) to dynamically make changes to Octopus and gives
#	all others read-only privileges. 
#	Accepted values are 3 octal digits ie. 600, 644 etc 
#shm_perms=644

# Directive: fd_limit
#	Sets the amount of file descriptors you would like the program to use. It's best to use
#	the value of '0' which will use the system defined limit. Be aware that only the
#	superuser can override hard limits placed on the user running Octopus.
#	Accepted values are integers greater than or equal to 0. 
#fd_limit=0

# Directive: session_limit
#	When the Octopus load balance starts up, it statically allocates enough memory to support an upper
#	limit on the number of simultaneous sessions that can be handled. By default, the number of sessions
#	will be calculated from the availability of file descriptors set by the OS. The basic formula is
#	session_limit = available_file_descriptors / 3. If you wish to set a lower limit on sessions you may
#	set this value but it is recommended to leave the value at '0' which means autoconfigure.
#session_limit=0

# Directive: log_file
#	Location and name of logfile
#	Accepted value is a full file path that the user starting Octopus can write to.
#	This directive must not be commented out.
#	Default is /var/log/octopuslb.log
log_file=/var/log/octopuslb.log

# Directive: debug_level
#	This sets the verbosity of logging by the server and monitor process,
#	On a production server this should be 0. 
#	Default value is 0.
#	Accepted values are integers between 0 and 6 
#debug_level=0

# Directive: use_syslog
#	When Octopus starts or abnormally exits an entry will be written to the syslog daemon. 
#	A value of 1 turns on syslog logging, 0 turns it off.
#	Default is 0.
#use_syslog=0



# OPTIONS FOR MONITOR PROCESS
# -----------------------------------------------------------------------------

# Directive: monitor_interval
#	This value specifies the time period between runs of the monitoring process. The monitoring 
#	process checks server availability as well as SNMP load and handles HASH rebalancing too.
#	The value for this directive will be a whole number of seconds and should be greater than the
#	monitor_interval directive.
#	The default value is 5
#	Accepted values are integers greater than or equal to 0.
#monitor_interval=5

# Directive: connect_timeout
#	This value specifies how many seconds Octopus should wait when performing a service check.
#	The check simply tries to create a TCP connection to the server on the designated port 
#	and then sets the server state based on the response.
#	The default value is 5.
#	Accepted values are integers greater than or equal to 1.
#connect_timeout=5

# Directive: snmp_enable
#	Use SNMP server load checks. You should definitely enable this if you have compiled Octopus with
#	SNNP development libraries and your servers support SNMP.
#	The default value is 'off'.
#	Accepted values are 'on' or 'off'.
#snmp_enable=off

# Directive: snmp_community_pw
#	This is the SNMP community string that will be used for the v1/v2c style SNMP requests
#	for server load information requests.  
#snmp_community_pw=my_readonly_snmp_community_string

# OPTIONS FOR MEMBER AND CLONE CONFIGURATION
# -----------------------------------------------------------------------------

#	This is where the configuration for the servers in the balancing group
#	are set. The format is shown below;

#[ServerName] <- servername may be up to 16 characters long
#ip = ip-address
#port=tcp destination port, default is 80
#maxc (optional) = maximum number of connections this server will accept. A positive integer.
#maxl (optional) = maximum load that the server is effective at. Read online doco for more info.
#status (optional) = 'enabled/disabled' sets state of server when octopus-server is launched. Default is enabled.
#clone (optional) = 'true/false'. Default is false (meaning it is a standard member server).
#standby (optional) = 'true/false'. Standby servers are only used if no normal servers can be chosen. Default is false.
#[/]


# Example A: 3 mysql servers being load balanced

#[mysql-node-1]
#ip = 10.0.0.1
#port=3306
#maxc=1000
#maxl=4.0
#status=enabled
#clone=false
#standby=false
#[/]

#[mysql-node-2]
#ip = 10.0.0.2
#port=3306
#maxc=1000
#maxl=4.0
#status=enabled
#clone=false
#standby=false
#[/]

#[mysql-node-3]
#ip = 10.0.0.3
#port=3306
#maxc=1000
#maxl=4.0
#status=enabled
#clone=false
#standby=false
#[/]


# Example B: 2 webservers in production and two (clones) in a testing environment

#[webserver-1]
#ip = 192.168.1.1
#port=80
#maxc=2000
#maxl=8.0
#status=enabled
#clone=false
#standby=false
#[/]

#[webserver-2]
#ip = 192.168.1.2
#port=80
#maxc=2000
#maxl=8.0
#status=enabled
#clone=false
#standby=false
#[/]

#[webserver-3]
#ip = 192.168.1.3
#port=80
#maxc=2000
#maxl=8.0
#status=enabled
#clone=true
#standby=false
#[/]

#[webserver-4]
#ip = 192.168.1.4
#port=80
#maxc=2000
#maxl=8.0
#status=enabled
#clone=true
#standby=false
#[/]

# Example C: Minimalist config

#[webserverA]
#ip=172.26.1.1
#[/]

#[webserverB]
#ip=172.26.2.2
#[/]
